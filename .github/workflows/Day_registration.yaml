name: Day Regirstration Pickleball

permissions:
  contents: write

on:
  schedule:
    - cron: '35 5 * * 0' # 23:35 Calgary (Sunday night) = 05:35 UTC Monday
    - cron: '45 5 * * 0' # 23:45  Sunday is 0 Saturday 6
    - cron: '55 5 * * 0' # 23:55 Calgary
  workflow_dispatch:  # Ajoutez cette ligne

env:
  TARGET_DATE: "09-Oct-25"
  TARGET_TIME: "4:15"
  TARGET_DAY: "Sunday"

jobs:
  register:
    runs-on: ubuntu-latest
    steps:
      # ==========================================
      # STEP 1: Checkout code and fetch tags
      # ==========================================
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
      
      - name: Set parameters
        id: params
        run: |

          echo "date=${{ env.TARGET_DATE }}" >> $GITHUB_OUTPUT
          echo "time=${{ env.TARGET_TIME }}" >> $GITHUB_OUTPUT
          echo "day=${{ env.TARGET_DAY }}" >> $GITHUB_OUTPUT

          

      - name: Git setup and fetch tags
        run: |
          echo "🔧 Configuring Git..."
          git config user.name "bot"
          git config user.email "bot@github.com"
          echo "🏷️ Fetching tags from remote..."
          git fetch --tags
          echo "✅ Tags fetched successfully"

      # ==========================================
      # STEP 2: Check tag and timing
      # ==========================================
      - name: Check tag & timing
        id: check
        run: |
          echo "======================================"
          echo "🕐 Checking timing and tags"
          echo "======================================"
          target_date="${{ steps.params.outputs.date }}"
          tag="success_${target_date}"
          echo "🔍 Looking for tag: $tag"
          
          # Check if tag already exists
          if git tag -l | grep -q "^${tag}$"; then
            echo "🏷️ ✅ Success tag already exists: $tag"
            echo "🛑 Stopping workflow (success already registered)"
            echo "exists=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "📝 Tag not found, continuing..."
          
          # Get current UTC time
          current_hour=$((10#$(date -u +%H)))
          current_minute=$((10#$(date -u +%M)))
          current_second=$((10#$(date -u +%S)))
          echo "🕐 Current UTC time: ${current_hour}:${current_minute}:${current_second}"
          
          # Calculate time in seconds
          current_total_seconds=$(( (current_hour * 3600) + (current_minute * 60) + current_second ))
          target_total_seconds=$(( 6 * 3600 )) # 6:00:00 UTC = midnight Calgary

          diff_seconds=$(( target_total_seconds - current_total_seconds ))
          diff_seconds = 700
          echo "⏱️ Current seconds since UTC midnight: $current_total_seconds"
          echo "🎯 Target seconds (6:00 UTC): $target_total_seconds"
          echo "📊 Difference: $diff_seconds seconds"
          echo "exists=false" >> $GITHUB_OUTPUT

          # Timing logic
          if [ $diff_seconds -gt 600 ]; then
            echo "❌ Too early: $diff_seconds seconds remaining (> 10 minutes)"
            echo "🛑 Stopping workflow"
            echo "exists=true" >> $GITHUB_OUTPUT

          elif [ $diff_seconds -gt 30 ]; then
            sleep_duration=$(( diff_seconds - 30 ))
            echo "⌛ Sleeping for $sleep_duration seconds (until 30s before 6:00 UTC)"
            sleep $sleep_duration
            echo "✅ Sleep complete, continuing..."
          elif [ $diff_seconds -ge 0 ]; then
            echo "⏭️ Less than 30 seconds remaining, continuing immediately"
          else
            echo "✅ Past target time by $((-diff_seconds)) seconds, continuing"
          fi
          
          echo "======================================"

      # ==========================================
      # STEP 3: Registration attempt
      # ==========================================
      - name: Register
        id: registration
        if: steps.check.outputs.exists == 'false'
        uses: devcontainers/ci@v0.3
        env:
          TARGET_DATE: ${{ env.TARGET_DATE }}
          TARGET_TIME: ${{ env.TARGET_TIME }}
          TARGET_DAY: ${{ env.TARGET_DAY }}
          YOUR_SECRET_EMAIL: ${{ secrets.YOUR_SECRET_EMAIL }}
          YOUR_SECRET_PASSWORD: ${{ secrets.YOUR_SECRET_PASSWORD }}
          YOUR_SECRET_LOGON_URL: ${{ secrets.YOUR_SECRET_LOGON_URL }}
          YOUR_SECRET_PLANNING_URL: ${{ secrets.YOUR_SECRET_PLANNING_URL }}
          YOUR_SECRET_LOGIN_URL: ${{ secrets.YOUR_SECRET_LOGIN_URL }}
          YOUR_SECRET_MY_NAME: ${{ secrets.YOUR_SECRET_MY_NAME }}
        with:
          runCmd: |
            echo "======================================"
            echo "🎾 Pickleball Registration Attempt"
            echo "======================================"
            echo "Pickleball Registration: ${{ steps.params.outputs.day }}"
            echo "📅 Date: ${{ steps.params.outputs.date }}"
            echo "🕐 Time: ${{ steps.params.outputs.time }}"

            
            FINAL_CODE=1
            for i in {1..3}; do
              echo ""
              echo "🔄 Attempt $i/3..."
              python3 execution.py "${{ steps.params.outputs.date }}" "${{ steps.params.outputs.time }}"
              EXIT_CODE=$?
              echo "📊 Python exit code: $EXIT_CODE"
              
              if [ $EXIT_CODE -eq 0 ]; then
                echo "✅ Registration successful!"
                FINAL_CODE=0
                break
              else
                echo "❌ Attempt $i failed"
                if [ $i -lt 3 ]; then
                  echo "⌛ Waiting 20 seconds before next attempt..."
                  sleep 20
                fi
              fi
            done
            
            echo ""
            echo "🕐 Current UTC time: ${current_hour}:${current_minute}:${current_second}"
            echo "📊 Final code: $FINAL_CODE"
            echo "PYTHON_EXIT_CODE=$FINAL_CODE" >> $GITHUB_ENV
            echo "======================================"
            exit 0
          push: never

      # ==========================================
      # STEP 4: Create success tag
      # ==========================================
      - name: Tag success
        if: steps.check.outputs.exists == 'false' && env.PYTHON_EXIT_CODE == '0'
        run: |
          echo "======================================"
          echo "🏷️ Creating success tag"
          echo "======================================"
          echo "🕐 Current UTC time: ${current_hour}:${current_minute}:${current_second}"
          target_date="${{ steps.params.outputs.date }}"
          tag="success_${target_date}"

          echo "📝 Tag to create: $tag"
          
          git commit --allow-empty -m "✅ $tag"
          git tag "$tag"
          
          echo "📤 Pushing tag to remote..."
          git push origin HEAD "$tag"
          echo "✅ Tag pushed successfully!"
          echo "======================================"