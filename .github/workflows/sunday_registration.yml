name: Registration Pickleball Sunday

permissions:
  contents: write
  actions: read

on:
  # Multiple schedule options - you can enable/disable by commenting/uncommenting
  schedule:    
    # - cron: '0 5 * * 0'  # 00:05 AM Calgary (summer) Sunday
    # - cron: '15 5 * * 0'  # 00:05 AM Calgary (summer) Sunday
     - cron: '30 5 * * 0'  # 00:05 AM Calgary (summer) Sunday
     - cron: '45 5 * * 0'  # 00:05 AM Calgary (summer) Sunday
     - cron: '55 5 * * 0'  # 00:05 AM Calgary (summer) Sunday
     - cron: '0 6 * * 0'  # 00:05 AM Calgary (summer) Sunday

    
  # Manual trigger with customizable parameters
  workflow_dispatch:
    inputs:
      target_date:
        description: 'Target date (format: DD-MMM-YY, e.g., 19-Aug-25)'
        required: true
        default: '15-Sep-25'
        type: string
      target_time:
        description: 'Target time (format: H:MM or HH:MM, e.g., 4:30 or 14:30)'
        required: true
        default: '8:00'
        type: string

# Default values for automatic executions
env:
  DEFAULT_DATE: "28-Sep-25"
  DEFAULT_TIME: "9:00"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1


      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Fetch all tags
        run: |
          echo "🏷️ Fetching all tags from remote..."
          git fetch --tags
          echo "📋 Available tags:"
          git tag -l

      - name: Set parameters
        id: params
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "date=${{ github.event.inputs.target_date }}" >> $GITHUB_OUTPUT
            echo "time=${{ github.event.inputs.target_time }}" >> $GITHUB_OUTPUT
            echo "trigger_type=manual" >> $GITHUB_OUTPUT
            echo "environment=manual" >> $GITHUB_OUTPUT
          else
            echo "date=${{ env.DEFAULT_DATE }}" >> $GITHUB_OUTPUT
            echo "time=${{ env.DEFAULT_TIME }}" >> $GITHUB_OUTPUT
            echo "trigger_type=scheduled" >> $GITHUB_OUTPUT
            echo "environment=scheduled" >> $GITHUB_OUTPUT
          fi
             
      - name: Check if success tag already exists
        id: tag_check
        run: |
          target_date="${{ steps.params.outputs.date }}"
          tag_name="success_${target_date}"
          
          echo "🔍 Checking for existing tag: $tag_name"
          
          if git tag -l | grep -q "^${tag_name}$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "🏷️ Success tag already exists: $tag_name"
            exit 0
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "🏷️ Success tag does not exist: $tag_name"
          fi


      - name: Logique conditionnelle précise
        if: steps.tag_check.outputs.tag_exists == 'false'

        run: |
          # Forcer base 10 avec 10# ou retirer le 0 de tête
          current_hour=$((10#$(date -u +%H)))
          current_minute=$((10#$(date -u +%M)))
          diff_minutes=$(( ((current_hour * 60) + current_minute) - 360 ))
                 
          echo "Heure: ${current_hour}h${current_minute}m"
          echo "Différence: $diff_minutes minutes"
                 
          if [ $diff_minutes -lt -15 ]; then
          # Plus de 15 min avant → STOP
            echo "❌ STOP: $diff_minutes < -15"
            exit 0
                 
          elif [ $diff_minutes -lt 0 ]; then
          # Entre -15 et -1 (inclus) → SLEEP
            abs_diff=$((-diff_minutes))
            sleep_seconds=$((abs_diff * 60))
            echo "⌛ SLEEP: $abs_diff minutes"
            sleep $sleep_seconds
            echo "✅ Continue après sleep"
                 
          else
           # 0 ou positif → CONTINUE
            echo "✅ CONTINUE: $diff_minutes >= 0"
          fi    

        
      - name: Display execution info
        if: steps.tag_check.outputs.tag_exists == 'false'

        run: |
          echo "🎾 Sunday Pickleball Registration"
          echo "📅 Date: ${{ steps.params.outputs.date }}"
          echo "🕐 Time: ${{ steps.params.outputs.time }}"
          echo "🔄 Trigger: ${{ steps.params.outputs.trigger_type }}"
          echo "🌍 Environment: ${{ steps.params.outputs.environment }}"

      - name: Run Python test in devcontainer
        if: steps.tag_check.outputs.tag_exists == 'false'

        uses: devcontainers/ci@v0.3
        env:
          YOUR_SECRET_EMAIL: ${{ secrets.YOUR_SECRET_EMAIL }}
          YOUR_SECRET_PASSWORD: ${{ secrets.YOUR_SECRET_PASSWORD }}
          YOUR_SECRET_LOGON_URL: ${{ secrets.YOUR_SECRET_LOGON_URL }}
          YOUR_SECRET_PLANNING_URL: ${{ secrets.YOUR_SECRET_PLANNING_URL }}
          YOUR_SECRET_LOGIN_URL: ${{ secrets.YOUR_SECRET_LOGIN_URL }}
          YOUR_SECRET_MY_NAME: ${{ secrets.YOUR_SECRET_MY_NAME }}
          # Additional environment variables
          EXECUTION_ENVIRONMENT: ${{ steps.params.outputs.environment }}
          TRIGGER_TYPE: ${{ steps.params.outputs.trigger_type }}
        with:
          runCmd: |
            FINAL_EXIT_CODE=1
            for i in {1..3}; do
              echo "Attempt $i of 3"
              python3 execution.py "${{ steps.params.outputs.date }}" "${{ steps.params.outputs.time }}"
              EXIT_CODE=$?
        
              if [ $EXIT_CODE -eq 0 ]; then
               echo "✅ Success on attempt $i"
               FINAL_EXIT_CODE=0
               break
              else
               echo "❌ Failed on attempt $i with exit code $EXIT_CODE"
               if [ $i -eq 3 ]; then
                echo "🚨 All 3 attempts failed"
                FINAL_EXIT_CODE=$EXIT_CODE
               else
                echo "⏳ Waiting 30 seconds before retry..."
                sleep 30
               fi
              fi
            done
      
            echo "PYTHON_EXIT_CODE=$FINAL_EXIT_CODE" >> $GITHUB_ENV
            echo "Final exit code: $FINAL_EXIT_CODE"
            exit 0
          push: never


      - name: Create success tag if registration succeeded
        if: steps.tag_check.outputs.tag_exists == 'false'

        run: |
          target_date="${{ steps.params.outputs.date }}"
          
          if [ "${PYTHON_EXIT_CODE:-1}" = "0" ]; then
            echo "✅ Registration succeeded"
            
            tag_name="success_${target_date}"
            
            git commit --allow-empty -m "✅ Registration succeeded for ${target_date}"
            git tag -a "$tag_name" -m "Registration success for ${target_date} - $(date -u)"
            git push origin ${{ github.ref_name }}
            git push origin "$tag_name"
            
            echo "🏷️ Success tag created: $tag_name"
          else
            echo "❌ Registration failed (exit code: ${PYTHON_EXIT_CODE:-unknown})"
          fi