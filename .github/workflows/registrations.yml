name: Registration Pickleball with json

permissions:
  contents: write
  actions: read


on:
  schedule:
    - cron: '40 5 * * *' # 23:45  Sunday is 0 Saturday 6
    - cron: '50 5 * * *' # 23:55 Calgary
    - cron: '0 6 * * *' # 00:00 Calgary

  workflow_dispatch:  # Ajoutez cette ligne
    inputs:
      date:
        description: 'Date (DD-Mth-YY)'
        required: true
      time:
        description: 'Time (HH:MM)'
        required: true
      level:
        description: 'Level'
        required: true


#limitation expect registration to begin a 6 UTC"

jobs:
  register:
    runs-on: ubuntu-latest
    # Utilise ton image Docker personnalis√©e
    container:
      image: scalgary/selenium-env:latest
    steps:
      # ==========================================
      # STEP 1: Checkout code and fetch tags
      # ==========================================
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Load registration from JSON
        id: params
        run: |
         echo "======================================"
         echo "üìñ Loading registration from JSON"
         echo "======================================"
         # Si manuel, utiliser les inputs
         if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
           echo "üîß Manual trigger - using inputs"
           date="${{ inputs.date }}"
           time="${{ inputs.time }}"
           level="${{ inputs.level }}"
           day=$(date -d "$date" +%A)
         else

           # R√©cup√©rer le jour actuel
           current_day=$(date -u +%A)
           echo "üìÖ Current day (UTC): $current_day"
    
           # Chercher la registration pour aujourd'hui (AJOUTE level)
           registration=$(jq -r --arg day "$current_day" \
           '.[] | select(.day == $day) | "\(.date)|\(.time)|\(.day)|\(.level)"' \
           registrations.json | head -1)


           # V√©rifier si une registration existe
           if [ -z "$registration" ]; then
            echo "‚ùå No registration found for $current_day"
            echo "should_continue=false" >> $GITHUB_OUTPUT
            exit 0
           fi

    
           # Split et afficher
           IFS='|' read -r date time day level<<< "$registration"
           echo "‚úÖ Registration found:"
           echo "   üìÖ Date: $date"
           echo "   üïê Time: $time"
           echo "   üìÜ Day: $day"
           echo "   üéæ Level: $level"
         fi

    
         # Exporter vers GITHUB_OUTPUT
         echo "date=$date" >> $GITHUB_OUTPUT
         echo "time=$time" >> $GITHUB_OUTPUT
         echo "day=$day" >> $GITHUB_OUTPUT
         echo "level=$level" >> $GITHUB_OUTPUT

         echo "should_continue=true" >> $GITHUB_OUTPUT
    
         echo "======================================"

    

      - name: Git setup and fetch tags
        if: steps.params.outputs.should_continue == 'true'
        run: |
          echo "üîß Configuring Git..."
          git config user.name "bot"
          git config user.email "bot@github.com"
          echo "üè∑Ô∏è Fetching tags from remote..."
          git fetch --tags
          echo "‚úÖ Tags fetched successfully"

      # ==========================================
      # STEP 2: Check tag and timing
      # ==========================================
      - name: Check tag & timing
        id: check
        if: steps.params.outputs.should_continue == 'true'
        run: |
          echo "======================================"
          echo "üïê Checking timing and tags"
          echo "======================================"
          # POUR TEST MANUEL SEULEMENT
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "üß™ Manual run detected - skipping timing check"
            echo "should_continue=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          target_date="${{ steps.params.outputs.date }}"
          tag="success_${target_date}"
          echo "üîç Looking for tag: $tag"
          
          # Check if tag already exists
          if git tag -l | grep -q "^${tag}$"; then
            echo "üè∑Ô∏è ‚úÖ Success tag already exists: $tag"
            echo "üõë Stopping workflow (success already registered)"
            echo "should_continue=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "üìù Tag not found, continuing..."
          
          # Get current UTC time
          current_hour=$((10#$(date -u +%H)))
          current_minute=$((10#$(date -u +%M)))
          current_second=$((10#$(date -u +%S)))
          echo "üïê Current UTC time: ${current_hour}:${current_minute}:${current_second}"
          
          # Calculate time in seconds
          current_total_seconds=$(( (current_hour * 3600) + (current_minute * 60) + current_second ))
          target_total_seconds=$(( 6 * 3600 )) # 6:00:00 UTC = midnight Calgary

          diff_seconds=$(( target_total_seconds - current_total_seconds ))
          echo "‚è±Ô∏è Difference: $diff_seconds seconds avant 6:00 UTC"

          # Timing logic
          if [ $diff_seconds -gt 600 ]; then
            echo "‚ùå Too early: $diff_seconds seconds remaining (> 10 minutes)"
            echo "üõë Stopping workflow"
            echo "should_continue=false" >> $GITHUB_OUTPUT
            exit 0

          else
            echo "‚úÖ Moins de 10 minutes avant 6:00 UTC"
            echo "üì¶ Le conteneur sera d√©marr√©"
            echo "‚è∞ L'attente finale se fera DANS le conteneur"
            echo "should_continue=true" >> $GITHUB_OUTPUT
          fi


          echo "======================================"

      # ==========================================
      # STEP 3: Registration attempt
      # ==========================================
      - name: Register
        id: registration
        if: steps.check.outputs.should_continue == 'true'
        env:
          TARGET_DATE: ${{ steps.params.outputs.date }}
          TARGET_TIME: ${{ steps.params.outputs.time }}
          TARGET_DAY: ${{ steps.params.outputs.day }}

          YOUR_SECRET_EMAIL: ${{ secrets.YOUR_SECRET_EMAIL }}
          YOUR_SECRET_PASSWORD: ${{ secrets.YOUR_SECRET_PASSWORD }}
          YOUR_SECRET_LOGON_URL: ${{ secrets.YOUR_SECRET_LOGON_URL }}
          YOUR_SECRET_PLANNING_URL: ${{ secrets.YOUR_SECRET_PLANNING_URL }}
          YOUR_SECRET_LOGIN_URL: ${{ secrets.YOUR_SECRET_LOGIN_URL }}
          YOUR_SECRET_MY_NAME: ${{ secrets.YOUR_SECRET_MY_NAME }}
          YOUR_SECRET_APPOINTMENT: ${{ secrets.YOUR_SECRET_APPOINTMENT }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

          run: |
            echo "======================================"
            echo "üéæ Pickleball Registration Attempt"
            echo "======================================"
            # ‚è∞ ATTENTE JUSQU'√Ä EXACTEMENT 6:00 UTC
            if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then

             current_hour=$((10#$(date -u +%H)))
             current_minute=$((10#$(date -u +%M)))
             current_second=$((10#$(date -u +%S)))
             current_total_seconds=$(( (current_hour * 3600) + (current_minute * 60) + current_second ))
             target_total_seconds=$(( 6 * 3600 ))
             diff_seconds=$(( target_total_seconds - current_total_seconds ))
             echo "üïê Current UTC time: ${current_hour}:${current_minute}:${current_second}"

            
             if [ $diff_seconds -gt 0 ]; then
               echo "‚è∞ Attente de $diff_seconds secondes jusqu'√† 6:00:00 UTC exactement..."
               sleep $diff_seconds
               echo "‚úÖ 6:00:00 UTC atteint!"
             else
               echo "‚ö†Ô∏è D√©j√† apr√®s 6:00 UTC (par $((-diff_seconds)) secondes)"
             fi
            else
             echo "Manual : pas attente"
            fi
            echo "üìÖ Date: ${{ steps.params.outputs.date }}"
            echo "üïê Time: ${{ steps.params.outputs.time }}"

            echo "Pickleball Registration: ${{ steps.params.outputs.day }}"

            
            FINAL_CODE=1
            for i in {1..3}; do
              echo ""
              echo "üîÑ Attempt $i/3..."
              python3 execution.py "${{ steps.params.outputs.date }}" "${{ steps.params.outputs.time }}" "${{ steps.params.outputs.level }}"
              EXIT_CODE=$?
              echo "üìä Python exit code: $EXIT_CODE"
              
              if [ $EXIT_CODE -eq 0 ]; then
                echo "‚úÖ Registration successful!"
                FINAL_CODE=0
                break
              else
                echo "‚ùå Attempt $i failed"
                if [ $i -lt 3 ]; then
                  echo "‚åõ Waiting 20 seconds before next attempt..."
                  sleep 20
                fi
              fi
            done
            
            echo ""
            echo "üìä Final code: $FINAL_CODE"
            echo "PYTHON_EXIT_CODE=$FINAL_CODE" >> $GITHUB_OUTPUT
            echo "======================================"
            if [ $FINAL_CODE -eq 0 ]; then
              echo "üöÄ Running script2.py..."
              python3 reminder.py
            else
              echo "‚è≠Ô∏è Skipping reminder.py (execution.py failed)"
            fi

            exit 0
          push: never

      # ==========================================
      # STEP 4: Create success tag
      # ==========================================
      - name: Tag success
        if: steps.check.outputs.should_continue == 'true' && steps.registration.outputs.PYTHON_EXIT_CODE == '0'
        run: |
          echo "======================================"
          echo "üè∑Ô∏è Creating success tag"
          echo "======================================"
          target_date="${{ steps.params.outputs.date }}"
          tag="success_${target_date}"

          echo "üìù Tag to create: $tag"
          git add appointments.json
          git commit --allow-empty -m "‚úÖ $tag"
          #git commit -m "‚úÖ $tag"
          git tag "$tag"
          
          echo "üì§ Pushing tag to remote..."
          git push origin HEAD "$tag"
          echo "‚úÖ Tag pushed successfully!"
          echo "======================================"
